services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: test-project
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - DATABASE_URL=postgresql://postgres:123456@db:5432/test-project
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      - db
    networks:
      - app-network
    restart: unless-stopped

  # Development Frontend (React dev server)
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:5001
    depends_on:
      - backend
    networks:
      - app-network
    profiles:
      - dev
    restart: unless-stopped

  # Production Frontend (nginx-served)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - REACT_APP_BACKEND_URL=http://localhost:5001
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Development frontend using the main Dockerfile
  frontend-dev-alt:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3001:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:5001
    depends_on:
      - backend
    networks:
      - app-network
    profiles:
      - dev-alt
    restart: unless-stopped

volumes:
  postgres_data:
  backend_uploads:

networks:
  app-network:
    driver: bridge